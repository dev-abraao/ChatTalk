generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  login         String         @unique
  username      String         @db.VarChar(30)
  password      String
  messages      Messages[]
  ownedRooms    Rooms[]
  roomsJoined   UserInRoom[]
  hasCreatedRoom Boolean       @default(false)
  sessions      Session[]      // Relação com a tabela de sessões
}

model Rooms {
  id              String         @id @default(uuid())
  name            String
  description     String?
  owner_id        String
  created_at      DateTime       @default(now())
  messages        Messages[]
  owner           User           @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  is_default_room Boolean        @default(false)
  members         UserInRoom[]
}

model UserInRoom {
  userId        String
  roomId        String
  joinedAt      DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  room          Rooms          @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@id([userId, roomId])
}

model Messages {
  id         String   @id @default(uuid())
  room_id    String
  content    String
  user_id    String
  created_at DateTime @default(now())
  room       Rooms    @relation(fields: [room_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// Nova tabela de sessões
model Session {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  lastActiveAt DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  isValid      Boolean  @default(true)
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}
